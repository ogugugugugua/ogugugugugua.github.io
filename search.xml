<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo相关有用链接</title>
      <link href="archives/18c3ed78.html"/>
      <url>archives/18c3ed78.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://refined-x.com/2017/07/10/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/">Hexo自定义页面的方法</a></p><p><a href="https://tding.top/archives/9a232bbe.html">yilia主题下Categories分类构建</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java泛型</title>
      <link href="archives/a14eb637.html"/>
      <url>archives/a14eb637.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-Benefit-of-generic"><a href="#1-Benefit-of-generic" class="headerlink" title="1. Benefit of generic"></a>1. Benefit of generic</h4><p>The benefit of using generic along with container is that we can specify what is stored in the<br>container to avoid confusion of data type.</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;APHero&gt; heros = <span class="keyword">new</span> ArrayList&lt;APHero&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只有APHero可以放进去</span></span><br><span class="line">        heros.add(<span class="keyword">new</span> APHero());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ADHero甚至放不进去</span></span><br><span class="line">        <span class="comment">//heros.add(new ADHero());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取的时候也不需要进行转型，因为取出来一定是APHero</span></span><br><span class="line">        APHero apHero =  heros.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can also specify the &lt;Type&gt; and store its sub-class into the container.</p><blockquote><p>对象类型可以是泛型类型的子类，比如说在泛型集合声明时使用父类作为参数，那么在这个集合中可以放进去子类的实例。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只有作为Hero的子类可以放进去</span></span><br><span class="line">        heros.add(<span class="keyword">new</span> APHero());</span><br><span class="line">        heros.add(<span class="keyword">new</span> ADHero());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//和Hero无关的类型Item还是放不进去</span></span><br><span class="line">        <span class="comment">//heros.add(new Item());</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Generic-Stack"><a href="#2-Generic-Stack" class="headerlink" title="2. Generic Stack"></a>2. Generic Stack</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    LinkedList&lt;T&gt; heros = <span class="keyword">new</span> LinkedList&lt;T&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heros.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heros.getLast();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T h)</span></span>&#123;</span><br><span class="line">        heros.addLast(h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Above is a generic stack which can store different types of objects. For exemples:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MyStack&lt;Hero&gt;heroStack = <span class="keyword">new</span> MyStack&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">    heroStack.push(<span class="keyword">new</span> Hero(<span class="string">&quot;h&quot;</span>+i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span><br><span class="line">    Hero temp = heroStack.pull();</span><br><span class="line">    System.out.println(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-extends"><a href="#3-extends" class="headerlink" title="3. ?extends"></a>3. ?extends</h4><blockquote><p>ArrayList heroList&lt;? extends Hero&gt; 表示这是一个Hero泛型或者其子类泛型</p></blockquote><p>Now that it can store Hero and its sub-class, we can definitely take objects out from the container and cast it into Hero.<br>Therefore, we <strong>CAN</strong> take objects out but <strong>CAN NOT</strong> put objects in. Because if you put an object in, it can be other sub-class<br>of the &lt;?extends Type&gt; and thus cause confusion.</p><center><p><img src="https://user-images.githubusercontent.com/17522733/68239514-66597380-000b-11ea-8e8f-5049091dd7b4.png" alt="837"></p></center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;APHero&gt; apHeroList = <span class="keyword">new</span> ArrayList&lt;APHero&gt;();</span><br><span class="line">        apHeroList.add(<span class="keyword">new</span> APHero());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//? extends Hero 表示这是一个Hero泛型的子类泛型</span></span><br><span class="line">        ArrayList&lt;? extends Hero&gt; heroList = apHeroList;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//heroList 的泛型可以是Hero</span></span><br><span class="line">        <span class="comment">//heroList 的泛型可以使APHero</span></span><br><span class="line">        <span class="comment">//heroList 的泛型可以使ADHero</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以确凿的是，从heroList取出来的对象，一定是可以转型成Hero的</span></span><br><span class="line">        Hero h= heroList.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//但是，不能往里面放东西</span></span><br><span class="line">        heroList.add(<span class="keyword">new</span> ADHero()); <span class="comment">//编译错误，因为heroList的泛型 有可能是APHero</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-super"><a href="#4-super" class="headerlink" title="4. ?super"></a>4. ?super</h4><blockquote><p>ArrayList heroList&lt;? super Hero&gt; 表示这是一个Hero泛型或者其父类泛型</p></blockquote><p>We can put Hero and sub-class of Hero into the container but we <strong>CAN NOT</strong> take objects out because we have no idea<br>what we may take out. For exemples, we cannot take out an <code>Object</code> and cast it into Hero.</p><p>可以 父类=子类，不可以 子类=父类。因此不能取出来，不然没地儿放。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//? super Hero 表示 heroList的泛型是Hero或者其父类泛型</span></span><br><span class="line">        ArrayList&lt;? <span class="keyword">super</span> Hero&gt; heroList = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//heroList 的泛型可以是Hero</span></span><br><span class="line">        <span class="comment">//heroList 的泛型可以是Object</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//所以就可以插入Hero</span></span><br><span class="line">        heroList.add(<span class="keyword">new</span> Hero());</span><br><span class="line">        <span class="comment">//也可以插入Hero的子类</span></span><br><span class="line">        heroList.add(<span class="keyword">new</span> APHero());</span><br><span class="line">        heroList.add(<span class="keyword">new</span> ADHero());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//但是，不能从里面取数据出来,因为其泛型可能是Object,而Object是强转Hero会失败</span></span><br><span class="line">        Hero h= heroList.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5. Conclusion"></a>5. Conclusion</h4><blockquote><p>如果希望只取出，不插入，就使用? extends Hero</p></blockquote><blockquote><p>如果希望只插入，不取出，就使用? super Hero</p></blockquote><h4 id="5-Casting-between-generic"><a href="#5-Casting-between-generic" class="headerlink" title="5. Casting between generic"></a>5. Casting between generic</h4><p>Conclusion: super class generic cannot cast to sub class generic nor vice versa.</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="archives/735e5788.html"/>
      <url>archives/735e5788.html</url>
      
        <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h2><p><img src="https://user-images.githubusercontent.com/17522733/98710150-90aee100-2383-11eb-854f-bb4791b5e55e.gif" alt="quickSort"></p><a id="more"></a><h2 id="基本思想：挖坑填数-分治法"><a href="#基本思想：挖坑填数-分治法" class="headerlink" title="基本思想：挖坑填数 + 分治法"></a>基本思想：<strong>挖坑填数 + 分治法</strong></h2><ol><li>从序列中取出一个数作为基准数</li><li>分区过程：将比这个数大的数全部放到它的右边，小于或等于它的数全部放到它的左边</li><li>递归地对左右子序列尽心步骤2，直到各区间只有一个数</li></ol><hr><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>我们这里有初始数组如下</p><table><thead><tr><th align="center">i=0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">j=7</th></tr></thead><tbody><tr><td align="center">(49)</td><td align="center">38</td><td align="center">65</td><td align="center">97</td><td align="center">76</td><td align="center">13</td><td align="center">27</td><td align="center">49</td></tr></tbody></table><p>对于这个算法，我们需要两个变量<code>i</code>和<code>j</code>分别代表数组的两端，这两个变量将会分别往中间靠拢。</p><p>约定取当前区间的第一个元素为<code>index</code>作为参考，即<code>index = arr[i] = arr[0] = 49</code>。</p><p>这时<code>i=0</code>的地方就已经挖了一个坑。我们从数组的右端开始往左遍历<code>j</code>，找出比<code>index</code>小的数<code>arr[j]</code>，填到<code>arr[i]</code>即 <code>arr[0]</code>的位置；</p><p>显然当<code>j=6</code>时满足<code>arr[6]&lt;index</code>，所以按照上一行的解释<code>arr[0] = arr[i] = arr[j] = arr[6] = 27</code>，并且<code>i++</code>，数组变成：</p><table><thead><tr><th align="center">0</th><th align="center">i=1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">j=6</th><th align="center">7</th></tr></thead><tbody><tr><td align="center">27</td><td align="center">38</td><td align="center">65</td><td align="center">97</td><td align="center">76</td><td align="center">13</td><td align="center">(27)</td><td align="center">49</td></tr></tbody></table><p>这时<code>j=6</code>的地方就挖了一个坑。我们从数组的左端开始往右遍历<code>i</code>，找出比<code>index</code>大的数<code>arr[i]</code>，填到<code>arr[j]</code>即<code>arr[6]</code>的位置；</p><p>显然当<code>i=2</code>的时候满足<code>arr[2]&gt;index</code>，所以按照上一行的解释<code>arr[6] = arr[j] = arr[i] = arr[2] = 65</code>，并且<code>j--</code>，数组变成：</p><table><thead><tr><th align="center">0</th><th align="center">1</th><th align="center">i=2</th><th align="center">3</th><th align="center">4</th><th align="center">j=5</th><th align="center">6</th><th align="center">7</th></tr></thead><tbody><tr><td align="center">27</td><td align="center">38</td><td align="center">(65)</td><td align="center">97</td><td align="center">76</td><td align="center">13</td><td align="center">65</td><td align="center">49</td></tr></tbody></table><p>这是<code>i=2</code>的地方就被挖出一个坑。</p><p>再重复上面的步骤，<strong>先从后往前找，再从前往后找</strong>。</p><p>从<code>j</code>开始往前找，当<code>j=5</code>时，符合条件，将<code>arr[5]</code>挖出一个坑，<code>arr[i] = arr[2]</code>的坑被填上，并且<code>i++</code>，数组变成：。</p><table><thead><tr><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">i=3</th><th align="center">4</th><th align="center">j=5</th><th align="center">6</th><th align="center">7</th></tr></thead><tbody><tr><td align="center">27</td><td align="center">38</td><td align="center">13</td><td align="center">97</td><td align="center">76</td><td align="center">(13)</td><td align="center">65</td><td align="center">49</td></tr></tbody></table><p>从<code>i</code>开始往后找，当<code>i=3</code>时，符合条件，将<code>arr[3]</code>挖出一个坑，<code>arr[j] = arr[5]</code>的坑被填上，并且<code>j--</code>，数组变成：。</p><table><thead><tr><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">i=3</th><th align="center">j=4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th></tr></thead><tbody><tr><td align="center">27</td><td align="center">38</td><td align="center">13</td><td align="center">(97)</td><td align="center">76</td><td align="center">97</td><td align="center">65</td><td align="center">49</td></tr></tbody></table><p>从<code>j</code>开始往前找，此时<code>i==3,j==4</code>，由于要保持<code>i&lt;j</code>这个条件，所以无法再继续找到合适的元素。</p><p>这时只需要把<code>index</code>填回去<code>arr[i]</code>这个坑即可：</p><table><thead><tr><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th></tr></thead><tbody><tr><td align="center">27</td><td align="center">38</td><td align="center">13</td><td align="center">index=49</td><td align="center">76</td><td align="center">97</td><td align="center">65</td><td align="center">49</td></tr></tbody></table><p>通过上面这一轮可以看出，<code>arr[3]</code>前面的数字都小于它，<code>arr[3]</code>后面的数字都大于它。</p><p>只需要对<code>arr[0...2]</code>和<code>arr[4....7]</code>这两个子区间重复上述步骤即可。</p><hr><h2 id="对挖坑填数进行总结"><a href="#对挖坑填数进行总结" class="headerlink" title="对挖坑填数进行总结"></a>对挖坑填数进行总结</h2><p>1．i = L; j = R; 将基准数挖出形成第一个坑 a[i]。</p><p>2．j– 由后向前找比它小的数，找到后挖出此数填前一个坑 a[i] 中。</p><p>3．i++ 由前向后找比它大的数，找到后也挖出此数填到前一个坑 a[j] 中。</p><p>4．再重复执行 2，3 二步，直到 i==j，将基准数填入 a[i] 中。</p><h2 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySolution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = low, j = high;</span><br><span class="line">        <span class="keyword">if</span> (low &gt; high) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> temp = a[i];        <span class="comment">//挖坑，取当前区间的第一个数为基准</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; a[j] &gt;= temp) &#123;</span><br><span class="line">                j--;            <span class="comment">//j-- 由后向前找比它小的数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i&lt;j)&#123;</span><br><span class="line">                a[i] = a[j];        <span class="comment">//找到后挖出此数填前一个坑 a[i] 中</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; a[i] &lt; temp) &#123;</span><br><span class="line">                i++;            <span class="comment">//i++ 由前向后找比它大的数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i&lt;j)&#123;</span><br><span class="line">                a[j] = a[i];        <span class="comment">//找到后也挖出此数填到前一个坑 a[j] 中</span></span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = temp;</span><br><span class="line">        sort(a, low, i-<span class="number">1</span>);</span><br><span class="line">        sort(a, i+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[] = &#123; <span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">97</span>, <span class="number">76</span>, <span class="number">13</span>, <span class="number">27</span>, <span class="number">49</span> &#125;;</span><br><span class="line">        quickSort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之IO</title>
      <link href="archives/6a7238df.html"/>
      <url>archives/6a7238df.html</url>
      
        <content type="html"><![CDATA[<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h4 id="1-File"><a href="#1-File" class="headerlink" title="1.File"></a>1.File</h4><p>Some basic manipulations about <code>File</code>:</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">File test1 = <span class="keyword">new</span> File(<span class="string">&quot;c:\\WINDOWS\\&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;path: &quot;</span> + test1.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;existence: &quot;</span> + test1.exists());</span><br><span class="line">System.out.println(<span class="string">&quot;directory: &quot;</span> + test1.isDirectory());</span><br><span class="line">System.out.println(<span class="string">&quot;file: &quot;</span> + test1.isFile());</span><br><span class="line">System.out.println(<span class="string">&quot;length: &quot;</span> + test1.length());</span><br><span class="line">System.out.println(<span class="string">&quot;last modify time: &quot;</span> + <span class="keyword">new</span> Date((<span class="keyword">long</span>)test1.lastModified()));</span><br><span class="line">test1.renameTo(<span class="keyword">new</span> File(<span class="string">&quot;texe.exe&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;path: &quot;</span> + test1.getAbsolutePath());</span><br><span class="line">System.out.println(<span class="string">&quot;father: &quot;</span> + test1.getParentFile());</span><br></pre></td></tr></table></figure><h4 id="2-Find-specific-file-in-directory"><a href="#2-Find-specific-file-in-directory" class="headerlink" title="2.Find specific file in directory"></a>2.Find specific file in directory</h4><p>Find the maximum and minimum size file in a directory and print their sizes &amp; names</p><ul><li>no sub-directory:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(test1.list()));</span><br><span class="line">File[]fs= test1.listFiles();</span><br><span class="line"><span class="keyword">long</span> maxValue = Integer.MIN_VALUE;</span><br><span class="line">File maxName = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">long</span> minValue = Integer.MAX_VALUE;</span><br><span class="line">File minName = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span>(File f: fs)&#123;</span><br><span class="line">    <span class="keyword">if</span>(f.length()&gt;maxValue &amp;&amp; f.length()!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        maxValue = f.length();</span><br><span class="line">        maxName = f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f.length()&lt;minValue &amp;&amp; f.length()!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        minValue = f.length();</span><br><span class="line">        minName = f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">assert</span> maxName != <span class="keyword">null</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;Max: &quot;</span> + maxName.getAbsolutePath() + <span class="string">&quot; &quot;</span> + maxValue);</span><br><span class="line"><span class="keyword">assert</span> minName != <span class="keyword">null</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;Min: &quot;</span> + minName.getAbsolutePath() + <span class="string">&quot; &quot;</span> + minValue);</span><br></pre></td></tr></table></figure></li><li>sub-directory:<br>For this, we do it in a recursive way:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> maxValue1 = Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> File maxName1 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> minValue1 = Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> File minName1 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(file.isDirectory())&#123;</span><br><span class="line">            File[] temp = file.listFiles();</span><br><span class="line">            <span class="keyword">if</span>(temp!=<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">for</span>(File f:temp)</span><br><span class="line">                find(f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(file.isFile())&#123;</span><br><span class="line">            <span class="keyword">if</span>(file.length()&gt;maxValue1 &amp;&amp; file.length()!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                maxValue1 = file.length();</span><br><span class="line">                maxName1 = file;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(file.length()&lt;minValue1 &amp;&amp; file.length()!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                minValue1 = file.length();</span><br><span class="line">                minName1 = file;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">File test1 = <span class="keyword">new</span> File(<span class="string">&quot;c:\\WINDOWS\\&quot;</span>);</span><br><span class="line">find(test1);</span><br><span class="line">System.out.println(<span class="string">&quot;Max: &quot;</span> + maxName1.getAbsolutePath() + <span class="string">&quot; &quot;</span> + maxValue1);</span><br><span class="line">System.out.println(<span class="string">&quot;Min: &quot;</span> + minName1.getAbsolutePath() + <span class="string">&quot; &quot;</span> + minValue1);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-Byte-Stream"><a href="#3-Byte-Stream" class="headerlink" title="3.Byte Stream"></a>3.Byte Stream</h4><p>Pay attention:<br>OutputStream是字节输出流，同时也是抽象类，只提供方法声明，不提供方法的具体实现。<br>FileOutputStream 是OutputStream子类，以FileOutputStream 为例向文件写出数据</p><p>注: 如果文件d:/lol2.txt不存在，写出操作会自动创建该文件。<br>但是如果是文件 d:/xyz/lol2.txt，而目录xyz又不存在，会抛出异常<br>那么怎么自动创建xyz目录？:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File f = <span class="keyword">new</span> File(<span class="string">&quot;d:/xyz/abc/def/lol2.txt&quot;</span>);</span><br><span class="line">            <span class="comment">//因为默认情况下，文件系统中不存在 d:\xyz\abc\def，所以输出会失败</span></span><br><span class="line">            <span class="comment">//首先获取文件所在的目录</span></span><br><span class="line">            File dir = f.getParentFile();</span><br><span class="line">            <span class="comment">//如果该目录不存在，则创建该目录</span></span><br><span class="line">            <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line"><span class="comment">//              dir.mkdir(); //使用mkdir会抛出异常，因为该目录的父目录也不存在</span></span><br><span class="line">                dir.mkdirs(); <span class="comment">//使用mkdirs则会把不存在的目录都创建好</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span> data[] = &#123; <span class="number">88</span>, <span class="number">89</span> &#125;;</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">            fos.write(data);</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Tear-down-file-into-several-parts"><a href="#4-Tear-down-file-into-several-parts" class="headerlink" title="4.Tear down file into several parts"></a>4.Tear down file into several parts</h4><p>Essence: read the file from hard disk into memory then divide it into whatever we want.</p><h4 id="5-Close-Stream-in-the-right-way"><a href="#5-Close-Stream-in-the-right-way" class="headerlink" title="5.Close Stream in the right way"></a>5.Close Stream in the right way</h4><ul><li>primitive way:<br>we close all the FileInputStream/FileOutputStream in the <code>finally</code> block to avoid forgetting to close them in <code>try</code>/<code>catch</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(File f)</span></span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;<span class="comment">//make sure that it is here insdead of in the &#x27;try&#x27; block</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(f);<span class="comment">//initialize here</span></span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fis.read(data);<span class="comment">//read data like this</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">byte</span> b:data)</span><br><span class="line">                System.out.println(b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123; <span class="comment">//need a &#x27;try&#x27; block to enable the close manipulation</span></span><br><span class="line">                    fis.close(); <span class="comment">//we close the FileInputStream here</span></span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li>avanced way(try-with-resources):<br>we do everything in the <code>try(...)</code> block, so called <strong>AutoCloseable</strong> :<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read_avanced</span><span class="params">(File f)</span></span>&#123;</span><br><span class="line">        <span class="comment">//把流定义在try()里,try,catch或者finally结束的时候，会自动关闭</span></span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(f))&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) f.length()];</span><br><span class="line">            fis.read(data);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">byte</span> b:data)</span><br><span class="line">                System.out.println(b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…."></a>未完待续….</h4>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之Lambda表达式</title>
      <link href="archives/34f2cda5.html"/>
      <url>archives/34f2cda5.html</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><p>整章围绕集合筛选来做</p><a id="more"></a><h4 id="1-Find-out-heros-that-satisfy-requirements-in-a-common-way"><a href="#1-Find-out-heros-that-satisfy-requirements-in-a-common-way" class="headerlink" title="1. Find out heros that satisfy requirements in a common way"></a>1. Find out heros that satisfy requirements in a common way</h4><p>First of all we have basic Hero class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> damage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name =name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化name,hp,damage的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name,<span class="keyword">float</span> hp, <span class="keyword">int</span> damage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name =name;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">        <span class="keyword">this</span>.damage = damage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hero [name=&quot;</span> + name + <span class="string">&quot;, hp=&quot;</span> + hp + <span class="string">&quot;, damage=&quot;</span> + damage + <span class="string">&quot;]\r\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Then we have a common function to filter specific Heros:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(List&lt;Hero&gt; heros)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Hero h:heros)&#123;</span><br><span class="line">            <span class="keyword">if</span>(h.damage&lt;<span class="number">50</span> &amp;&amp; h.hp&gt;<span class="number">100</span>)&#123;</span><br><span class="line">                System.out.println(h);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(List&lt;Hero&gt; heros)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Hero h:heros)&#123;</span><br><span class="line">            <span class="keyword">if</span>(h.damage&lt;<span class="number">50</span> &amp;&amp; h.hp&gt;<span class="number">100</span>)&#123;</span><br><span class="line">                System.out.println(h);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            heros.add(<span class="keyword">new</span> Hero(<span class="string">&quot;h&quot;</span>+i,r.nextInt(<span class="number">1000</span>),r.nextInt(<span class="number">100</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        filter(heros);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Anonyme-function"><a href="#2-Anonyme-function" class="headerlink" title="2.Anonyme function:"></a>2.Anonyme function:</h4><blockquote><p>首先准备一个接口HeroChecker，提供一个test(Hero)方法<br>然后通过匿名类的方式，实现这个接口</p></blockquote><p>So first we construct an interface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HeroChecker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">herochecker</span><span class="params">(Hero h)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And then we need to reconstruct a function of filter:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter_anonyme</span><span class="params">(List&lt;Hero&gt;heros, HeroChecker heroChecker)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Hero h : heros)&#123;</span><br><span class="line">            <span class="keyword">if</span>(heroChecker.herochecker(h))&#123;</span><br><span class="line">                System.out.println(h);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>In the main function we use the anonyme function like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HeroChecker heroChecker = <span class="keyword">new</span> HeroChecker() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">herochecker</span><span class="params">(Hero h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h.damage &lt; <span class="number">50</span> &amp;&amp; h.hp &gt; <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">filter_anonyme(heros,heroChecker);</span><br></pre></td></tr></table></figure><h4 id="3-lambda-way"><a href="#3-lambda-way" class="headerlink" title="3. lambda way"></a>3. lambda way</h4><p>Instead of (1)constructing an interface &amp; (2)implementing the details of the instance of the interface in the main function, (like above), we distill the essence of the HeroChecker(instance of the interface) and represent it as a single line, and as a parameter:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">        HeroChecker heroChecker = <span class="keyword">new</span> HeroChecker() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">herochecker</span><span class="params">(Hero h)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> h.damage &lt; <span class="number">50</span> &amp;&amp; h.hp &gt; <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//        filter_anonyme(heros,heroChecker); //old way as aboved</span></span><br><span class="line">        filter_anonyme(heros , h-&gt;h.damage&lt;<span class="number">50</span> &amp;&amp; h.hp&gt;<span class="number">100</span>);<span class="comment">//lambda way!!!</span></span><br></pre></td></tr></table></figure><p>Then we will use another exemple to describe how an anonyme class becomes a lambda line:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名类</span></span><br><span class="line">        Comparator&lt;Hero&gt; c = <span class="keyword">new</span> Comparator&lt;Hero&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Hero h1, Hero h2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> h1.hp&gt;=h2.hp?<span class="number">1</span>:-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//equals</span></span><br><span class="line">       c = (Hero h1, Hero h2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> h1.hp&gt;=h2.hp?<span class="number">1</span>:-<span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//equals</span></span><br><span class="line">       c = (Hero h1, Hero h2) -&gt; h1.hp&gt;h2.hp?<span class="number">1</span>:-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//equals</span></span><br><span class="line">       c = (h1,h2) -&gt; h1.hp&gt;h2.hp?<span class="number">1</span>:-<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>Voila!</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> Lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="archives/8fe47ff4.html"/>
      <url>archives/8fe47ff4.html</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h4 id="1-增删改"><a href="#1-增删改" class="headerlink" title="1.增删改"></a>1.增删改</h4> <a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">    <span class="comment">//To import relevant .jar</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Use this kind of try block to enable automatic shut down of connection after manipulation</span></span><br><span class="line">    <span class="keyword">try</span>(Connection c = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test1?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;root&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Statement s = c.createStatement())</span><br><span class="line">        &#123;</span><br><span class="line">          s.execute(sql);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//Samples:</span></span><br><span class="line">    String sql = <span class="string">&quot;update hero set name = &#x27;change2&#x27; where id = 12&quot;</span>;</span><br><span class="line">    String sql1 = <span class="string">&quot;insert into hero values(null,&#x27;hero1&#x27;,200,100)&quot;</span></span><br><span class="line">    execute(sql);</span><br><span class="line">    execute(sql1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-查"><a href="#2-查" class="headerlink" title="2. 查"></a>2. 查</h4><p>Here we use ResultSet to get the returned result.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executeQuery</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>(Connection c = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test1?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;root&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Statement s = c.createStatement())</span><br><span class="line">        &#123;</span><br><span class="line">          ResultSet resultSet = s.executeQuery(sql);</span><br><span class="line">          <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">              <span class="keyword">int</span> id = resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">              String name = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">              <span class="keyword">float</span> hp = resultSet.getFloat(<span class="string">&quot;hp&quot;</span>);</span><br><span class="line">              <span class="keyword">int</span> damage = resultSet.getInt(<span class="number">4</span>);</span><br><span class="line">              System.out.printf(<span class="string">&quot;%d\t%s\t%f\t%d%n&quot;</span>, id, name, hp, damage);</span><br><span class="line">          &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//Samples:</span></span><br><span class="line">      String sql = <span class="string">&quot;select * from hero&quot;</span>;</span><br><span class="line">      executeQuery(sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-list-data-of-limit-amount"><a href="#3-list-data-of-limit-amount" class="headerlink" title="3. list data of limit amount"></a>3. list data of limit amount</h4><p>This can avoid wasting out all the memory the JVM. And facilitate the query speed by reducing the amount of data required, at the other hand, it is useful for inquerying data in a web page because each page can only contain limit amount of data presented.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>(Connection c = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test1?characterEncoding=UTF-8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;root&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        Statement s = c.createStatement()) &#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from hero limit &quot;</span> + start + <span class="string">&#x27;,&#x27;</span>+ count;</span><br><span class="line">        ResultSet resultSet = s.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            <span class="keyword">int</span> id = resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            String name = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">float</span> hp = resultSet.getFloat(<span class="string">&quot;hp&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> damage = resultSet.getInt(<span class="number">4</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t%s\t%f\t%d%n&quot;</span>, id, name, hp, damage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      list(<span class="number">10</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-PreparedStatement"><a href="#4-PreparedStatement" class="headerlink" title="4. PreparedStatement"></a>4. PreparedStatement</h4><p>Advantages:</p><ul><li>Readable, difficult to make mistakes</li><li>Compile only once, therefore faster</li><li>Avoid SQL Injection attack<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String name, <span class="keyword">float</span> hp, <span class="keyword">int</span> damage)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String sql = <span class="string">&quot;insert into hero values(null,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>(Connection c = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test1?characterEncoding=UTF-8&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        PreparedStatement ps = c.prepareStatement(sql)) &#123;</span><br><span class="line">        ps.setString(<span class="number">1</span>,name);</span><br><span class="line">        ps.setFloat(<span class="number">2</span>,hp);</span><br><span class="line">        ps.setInt(<span class="number">3</span>,damage);</span><br><span class="line">        ps.execute();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      insert(<span class="string">&quot;insertFunction&quot;</span>,<span class="number">250</span>,<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-Difference-between-Statement-execute-and-Statement-executeUpdate"><a href="#5-Difference-between-Statement-execute-and-Statement-executeUpdate" class="headerlink" title="5. Difference between Statement.execute and Statement.executeUpdate"></a>5. Difference between <code>Statement.execute</code> and <code>Statement.executeUpdate</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不同1：execute可以执行查询语句, executeUpdate不可以查询</span></span><br><span class="line"><span class="comment">// 然后通过getResultSet，把结果集取出来</span></span><br><span class="line">String sqlSelect = <span class="string">&quot;select * from hero&quot;</span>;</span><br><span class="line">s.execute(sqlSelect);</span><br><span class="line">ResultSet rs = s.getResultSet();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不同2:</span></span><br><span class="line"><span class="comment">// execute返回boolean类型，true表示执行的是查询语句，false表示执行的是insert,delete,update等等</span></span><br><span class="line"><span class="keyword">boolean</span> isSelect = s.execute(sqlSelect);</span><br><span class="line">System.out.println(isSelect);</span><br><span class="line"></span><br><span class="line"><span class="comment">// executeUpdate返回的是int，表示有多少条数据受到了影响</span></span><br><span class="line">String sqlUpdate = <span class="string">&quot;update Hero set hp = 300 where id &lt; 100&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> number = s.executeUpdate(sqlUpdate);</span><br><span class="line">System.out.println(number);</span><br></pre></td></tr></table></figure><h4 id="6-Get-AUTO-INCREMENT-id"><a href="#6-Get-AUTO-INCREMENT-id" class="headerlink" title="6. Get AUTO_INCREMENT id"></a>6. Get AUTO_INCREMENT id</h4><p>We use <code>PreparedStatement</code> and</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8&quot;</span>,<span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    PreparedStatement ps = c.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);  <span class="comment">//Pay attention here</span></span><br><span class="line">    ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//manipulations...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行插入语句</span></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在执行完插入语句后，MySQL会为新插入的数据分配一个自增长id</span></span><br><span class="line"><span class="comment">// JDBC通过getGeneratedKeys获取该id</span></span><br><span class="line">ResultSet rs = ps.getGeneratedKeys();</span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">    <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    System.out.println(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-Commit-and-AutoCommit"><a href="#7-Commit-and-AutoCommit" class="headerlink" title="7. Commit and AutoCommit"></a>7. <code>Commit</code> and <code>AutoCommit</code></h4><p>在事务中的多个操作，要么都成功，要么都失败。<br>通过 c.setAutoCommit(false); 关闭自动提交。<br>使用 c.commit(); 进行手动提交。<br>对于多个数据库操作，若处于同一个事务当中，要么都成功，要么都失败<br>所以，虽然第一条SQL语句是可以执行的，但是第二条SQL语句有错误，其结果就是两条SQL语句都没有被提交。 除非两条SQL语句都是正确的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加血的SQL</span></span><br><span class="line">String sql1 = <span class="string">&quot;update hero set hp = hp +1 where id = 22&quot;</span>;</span><br><span class="line">s.execute(sql1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 减血的SQL</span></span><br><span class="line"><span class="comment">// 不小心写错写成了 updata(而非update)</span></span><br><span class="line"></span><br><span class="line">String sql2 = <span class="string">&quot;updata hero set hp = hp -1 where id = 22&quot;</span>;</span><br><span class="line">s.execute(sql2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动提交</span></span><br><span class="line">c.commit();</span><br></pre></td></tr></table></figure><p>For the situation aboved, we cannot commit the two commands because one of them is grammatically wrong.</p><h4 id="8-Object-Relationship-Database-Mapping-ORM"><a href="#8-Object-Relationship-Database-Mapping-ORM" class="headerlink" title="8. Object Relationship Database Mapping (ORM)"></a>8. Object Relationship Database Mapping (ORM)</h4><p>对象和关系数据库的映射。<br>简单说，一个对象，对应数据库里的一条记录。<br>这是一种思想，在java代码中创建一个相应的数据类型，然后将其与数据库中的数据关联起来。可以编写诸如get,add,delete,list等函数。在这些函数中搭配PreparedStatement就会很好用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">int</span> damage;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name,<span class="keyword">float</span> hp,<span class="keyword">int</span> damage)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">        <span class="keyword">this</span>.damage = damage;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Hero h)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String sql = <span class="string">&quot;insert into hero values(null,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test1?characterEncoding=UTF-8&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">         PreparedStatement ps = c.prepareStatement(sql)) &#123;</span><br><span class="line"></span><br><span class="line">        ps.setString(<span class="number">1</span>, h.name);</span><br><span class="line">        ps.setFloat(<span class="number">2</span>, h.hp);</span><br><span class="line">        ps.setInt(<span class="number">3</span>, h.damage);</span><br><span class="line">        ps.execute();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    insert(<span class="keyword">new</span> Hero(<span class="string">&quot;TryHero&quot;</span>,<span class="number">200</span>,<span class="number">30</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-Data-Access-Object-DAO"><a href="#9-Data-Access-Object-DAO" class="headerlink" title="9. Data Access Object (DAO)"></a>9. Data Access Object (DAO)</h4><p>数据访问对象。<br>实际上就是运用了练习-ORM中的思路，把数据库相关的操作都封装在这个类里面，其他地方看不到JDBC的代码。定义这么一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DAO</span></span>&#123;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Hero hero)</span></span>;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Hero hero)</span></span>;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-数据库连接池"><a href="#10-数据库连接池" class="headerlink" title="10. 数据库连接池"></a>10. 数据库连接池</h4><p>待补充……</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常</title>
      <link href="archives/f495a96f.html"/>
      <url>archives/f495a96f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Exception-异常"><a href="#Exception-异常" class="headerlink" title="Exception 异常"></a>Exception 异常</h1><h2 id="1-try-catch"><a href="#1-try-catch" class="headerlink" title="1.try/catch"></a>1.try/catch</h2><p>In order to avoid predictable problems, we are forced to use try/catch for some commands like <code>FileInputStream</code>.</p> <a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File f= <span class="keyword">new</span> File(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;try to open d:/LOL.exe&quot;</span>);</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">            System.out.println(<span class="string">&quot;succeed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(FileNotFoundException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;d:/LOL.exe does not existe&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can surely use something like <code>catch(FileNotFoundException|ParseException e)</code> to include several excecptions at a time and in the block we then use something like <code>if(e instanceof FileNotFoundException)&#123;...&#125;</code> to decouple the combined exception. Instead of using several <code>catch</code> after the <code>try</code>.</p><h2 id="2-Usage-of-throws"><a href="#2-Usage-of-throws" class="headerlink" title="2.Usage of throws"></a>2.Usage of <code>throws</code></h2><p><code>throws</code> appears on the declation of a function to showcase a posibility of throwing an exception, which will not necessarily happen. On the contary, when we use <code>throw</code> we are indeed throwing an exception.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method1();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;d:/LOL.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;try to open d:/LOL.exe&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">        System.out.println(<span class="string">&quot;succeed&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above case, we throw an exception (if needed) in method2 and in we catch it in method2.</p><h2 id="3-try-catch-finally"><a href="#3-try-catch-finally" class="headerlink" title="3.try/catch/finally"></a>3.try/catch/finally</h2><p>It is NOT good to write codes like this because it will cause ambiguity to what will return in the end:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> return1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> return2();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> return3();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">return1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return 1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">return2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return 2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">return3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;return 3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = method();</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The better way is as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    result = return1();</span><br><span class="line">  &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    result = return2();</span><br><span class="line">  &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    result = return3();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As for the two exemples aboved, we will go through <code>return1()</code> then <code>return3()</code>, but at the end it will return result of <code>return3()</code> as shown in the better way.</p><h2 id="4-Classification"><a href="#4-Classification" class="headerlink" title="4.Classification"></a>4.Classification</h2><ol><li>CheckedException(e.g. FileNotFoundException,either <em>try/catch</em> either <em>throws exception</em> in declation)</li><li>RuntimeException<br>(e.g. ArithmeticException / ArrayIndexOutOfBoundsException / NullPointerException, Not obligated to use try/catch)</li><li>Error(e.g. OutOfMemoryError)</li></ol><blockquote><p>运行时异常与非运行时异常的区别：</p><ul><li>运行时异常是不可查异常，不需要进行显式的捕捉</li><li>非运行时异常是可查异常，必须进行显式的捕捉，或者抛出</li></ul></blockquote><h2 id="5-throwable"><a href="#5-throwable" class="headerlink" title="5.throwable"></a>5.throwable</h2><p>throwable is the father class of error/exception. It’s possible to throw a <code>throwable</code> in a function but it will also bring ambiguity because we have no idea it will be which kind of problem, so try to be specific about the exception.</p><center>![742](https://user-images.githubusercontent.com/17522733/68072779-867a0000-fd89-11e9-8a6a-2ed4787268ea.png)</center><h2 id="6-Self-defined-exception"><a href="#6-Self-defined-exception" class="headerlink" title="6.Self-defined exception"></a>6.Self-defined exception</h2><p>We can define our personalized exception by inheriting class exception, which may look like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.ls.LSOutput;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.PSource;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hero</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">heroDeadException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123; <span class="comment">//self defined exception</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">heroDeadException</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">heroDeadException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> hp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">hero</span><span class="params">(String name, <span class="keyword">int</span> hp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hp = hp;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(hero another)</span> <span class="keyword">throws</span> heroDeadException</span>&#123; <span class="comment">//throws exception</span></span><br><span class="line">        <span class="keyword">if</span>(another.hp&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> heroDeadException(another.name+<span class="string">&quot; is dead, no more attack&quot;</span>);<span class="comment">// here we throw out exception</span></span><br><span class="line">        &#125;</span><br><span class="line">        another.hp-=<span class="number">1</span>;</span><br><span class="line">        System.out.println(another.name+<span class="string">&quot; rested hp:&quot;</span>+another.hp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        hero a = <span class="keyword">new</span> hero(<span class="string">&quot;a&quot;</span>,<span class="number">99</span>);</span><br><span class="line">        hero b = <span class="keyword">new</span> hero(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                b.attack(a);</span><br><span class="line">                a.attack(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123; <span class="comment">// here we need to catch exception</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合之Set和List</title>
      <link href="archives/be884c2e.html"/>
      <url>archives/be884c2e.html</url>
      
        <content type="html"><![CDATA[<h1 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h1><h4 id="1-Basic-manipulations-about-a-List"><a href="#1-Basic-manipulations-about-a-List" class="headerlink" title="1.Basic manipulations about a List"></a>1.Basic manipulations about a List</h4><ul><li>add objects at specific positions<a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ArrayList heros = <span class="keyword">new</span> ArrayList();</span><br><span class="line">heros.add(<span class="keyword">new</span> Hero(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">heros.add(<span class="keyword">new</span> Hero(<span class="string">&quot;b&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    heros.add(<span class="keyword">new</span> Hero(<span class="string">&quot;hero &quot;</span> + i));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(heros);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定位置增加对象</span></span><br><span class="line">Hero specialHero = <span class="keyword">new</span> Hero(<span class="string">&quot;special hero&quot;</span>);</span><br><span class="line">heros.add(<span class="number">3</span>, specialHero);</span><br><span class="line">System.out.println(heros);</span><br></pre></td></tr></table></figure></li><li>check if contains certain objects <strong>(only when the object is identical)</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//contains</span></span><br><span class="line">         System.out.println(<span class="string">&quot;contain a: &quot;</span>+heros.contains(<span class="keyword">new</span> Hero(<span class="string">&quot;a&quot;</span>)));</span><br><span class="line">         System.out.println(<span class="string">&quot;contain special: &quot;</span>+heros.contains(specialHero));</span><br></pre></td></tr></table></figure></li><li>get objects of specific positions<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//get</span></span><br><span class="line">    System.out.println(heros.get(<span class="number">1</span>));</span><br><span class="line">    System.out.println(heros.get(heros.size()+<span class="number">1</span>));</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>get positions of specific objects <strong>(need to specify the object wanted, not just the same name)</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//indexof</span></span><br><span class="line">     System.out.println(<span class="string">&quot;position: &quot;</span>+heros.indexOf(specialHero));</span><br><span class="line">     System.out.println(<span class="string">&quot;position: &quot;</span>+heros.indexOf(<span class="keyword">new</span> Hero(<span class="string">&quot;a&quot;</span>)));</span><br><span class="line"> &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>remove specific objects (or objects of certain positions)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123; <span class="comment">//remove</span></span><br><span class="line">    System.out.println(heros);</span><br><span class="line">    heros.remove(<span class="number">2</span>);</span><br><span class="line">    System.out.println(heros);</span><br><span class="line">    heros.remove(specialHero);</span><br><span class="line">    System.out.println(heros);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>replace objects of specific positions<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    System.out.println(heros);</span><br><span class="line">    heros.set(<span class="number">3</span>,specialHero);</span><br><span class="line">    System.out.println(heros);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>cast an <code>ArrayList</code> to an array<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">         <span class="keyword">try</span>&#123;<span class="comment">//wrong casting</span></span><br><span class="line"><span class="comment">//             Hero[] array = (Hero[]) heros.toArray();</span></span><br><span class="line"><span class="comment">//             Hero[] array = (Hero[]) heros.toArray(new Hero[]&#123;&#125;);// wrong as well</span></span><br><span class="line">             System.out.println(array);</span><br><span class="line">         &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span>&#123;<span class="comment">//right casting</span></span><br><span class="line">             Hero array[] = (Hero[])heros.toArray(<span class="keyword">new</span> Hero[]&#123;&#125;);</span><br><span class="line">             System.out.println(<span class="string">&quot;array: &quot;</span>+array);</span><br><span class="line">         &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></li><li>add another <code>List</code> into present <code>List</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//addAll</span></span><br><span class="line">     ArrayList anotherHeros = <span class="keyword">new</span> ArrayList();</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">         anotherHeros.add(<span class="keyword">new</span> Hero(<span class="string">&quot;hero &quot;</span> + i*<span class="number">10</span>));</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(anotherHeros);</span><br><span class="line">     anotherHeros.addAll(<span class="number">4</span>,heros);</span><br><span class="line">     System.out.println(anotherHeros);</span><br><span class="line"> &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>clear the List<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;<span class="comment">//clear</span></span><br><span class="line">    System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">    heros.clear();</span><br><span class="line">    System.out.println(heros);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-Generic"><a href="#2-Generic" class="headerlink" title="2.Generic"></a>2.Generic</h4><p>If we do this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List heros = <span class="keyword">new</span> ArrayList();</span><br><span class="line">heros.add(Hero(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">heros.add(Hero(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">heros.add(Hero(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">heros.add(Item(<span class="string">&quot;1&quot;</span>));</span><br></pre></td></tr></table></figure><p>then we may encounter some problems of casting if we forget the corresponding position:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hero h1 = (Hero) heros.get(<span class="number">1</span>);</span><br><span class="line">Hero h2 = (Hero) heros.get(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//wrong if Item is not a sub-class of Hero ↓</span></span><br><span class="line"><span class="comment">//Hero h3 = (Hero) heros.get(3);</span></span><br></pre></td></tr></table></figure><p>so we introduce generic:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Hero&gt; genericheros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line">genericheros.add(<span class="keyword">new</span> Hero(<span class="string">&quot;盖伦&quot;</span>));</span><br><span class="line"><span class="comment">//如果不是Hero类型，根本就放不进去</span></span><br><span class="line"><span class="comment">//genericheros.add(new Item(&quot;冰杖&quot;));</span></span><br><span class="line"><span class="comment">//除此之外，还能存放Hero的子类</span></span><br><span class="line">genericheros.add(<span class="keyword">new</span> APHero());</span><br><span class="line"><span class="comment">//并且在取出数据的时候，不需要再进行转型了，因为里面肯定是放的Hero或者其子类</span></span><br><span class="line">Hero h = genericheros.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>Btw, we can neglect the second parameter:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Hero&gt; genericheros1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>Therefore if we want to construct a List that can <strong>only support certain data type</strong>, we can firstly construct an interface, and let whatever we want to put in the List to <code>implements</code> this interface. Then we construct a List with the type equals the interface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LOL</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GHero</span> <span class="keyword">implements</span> <span class="title">LOL</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> damage;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GHero</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 增加一个初始化name的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GHero</span><span class="params">(String name)</span> </span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line">    <span class="comment">// 重写toString方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GItem</span> <span class="keyword">implements</span> <span class="title">LOL</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GItem</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//提供一个初始化name的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GItem</span><span class="params">(String name)</span></span>&#123;<span class="keyword">this</span>.name = name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">effect</span><span class="params">()</span></span>&#123;System.out.println(<span class="string">&quot;物品使用后，可以有效果&quot;</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        List&lt;LOL&gt; genericList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        genericList.add(<span class="keyword">new</span> GHero(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        genericList.add(<span class="keyword">new</span> GHero(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        genericList.add(<span class="keyword">new</span> GHero(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        genericList.add(<span class="keyword">new</span> GItem(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        genericList.add(<span class="keyword">new</span> GItem(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">        String test = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// DOES NOT WORK!</span></span><br><span class="line">            <span class="comment">//genericList.add(test);</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Walk-through-a-list"><a href="#3-Walk-through-a-list" class="headerlink" title="3.Walk through a list"></a>3.Walk through a list</h4><ul><li>avanced for loop:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强型for循环</span></span><br><span class="line"><span class="keyword">for</span>(LOL l:genericList)&#123;</span><br><span class="line">    System.out.println(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>iterator:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代器简洁版本</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;LOL&gt; iter = genericList.iterator();iter.hasNext();)&#123;</span><br><span class="line">            System.out.println(iter.next());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用while的iterator</span></span><br><span class="line">        Iterator&lt;Hero&gt; it= heros.iterator();</span><br><span class="line">        <span class="comment">//从最开始的位置判断&quot;下一个&quot;位置是否有数据</span></span><br><span class="line">        <span class="comment">//如果有就通过next取出来，并且把指针向下移动</span></span><br><span class="line">        <span class="comment">//直到&quot;下一个&quot;位置没有数据</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            Hero h = it.next();</span><br><span class="line">            System.out.println(h);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://user-images.githubusercontent.com/17522733/68083728-8c74ed00-fe2c-11e9-861f-61aaa9da5187.png" alt="806"></p><h4 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h4><blockquote><p>首先初始化一个Hero集合，里面放100个Hero对象，名称分别是从<br>hero 0<br>hero 1<br>hero 2<br>…<br>hero 99.<br>通过遍历的手段，删除掉名字编号是8的倍数的对象</p></blockquote><h4 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE:"></a><strong><em>NOTE:</em></strong></h4><p>If we use <code>testHero.remove(temp);</code> while reading this List, there will be an <code>java.util.ConcurrentModificationException</code> Error:<br><a href="https://www.cnblogs.com/dolphin0520/p/3933551.html">https://www.cnblogs.com/dolphin0520/p/3933551.html</a></p><p>Method1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">        List&lt;Hero&gt; testHero = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line">        <span class="comment">// 放5个Hero进入容器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">99</span>; i++) &#123;</span><br><span class="line">            testHero.add(<span class="keyword">new</span> Hero(<span class="string">&quot;hero name &quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Hero&gt; iterator = testHero.iterator();iterator.hasNext();)&#123;</span><br><span class="line">            Hero temp = iterator.next();</span><br><span class="line"><span class="comment">//            wrong</span></span><br><span class="line"><span class="comment">//            char index = temp.name.charAt(temp.name.length() - 1);</span></span><br><span class="line">            <span class="keyword">int</span> index = Integer.parseInt(temp.name.substring(<span class="number">10</span>));</span><br><span class="line">            <span class="keyword">if</span>(index%<span class="number">8</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//                testHero.remove(temp);//wrong</span></span><br><span class="line">                <span class="comment">// Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span></span><br><span class="line">                <span class="comment">//at java.base/java.util.ArrayList$Itr.checkForComodification(ArrayList.java:1042)</span></span><br><span class="line">                <span class="comment">//at java.base/java.util.ArrayList$Itr.next(ArrayList.java:996)</span></span><br><span class="line">                <span class="comment">//at com.company.generic.main(generic.java:71)</span></span><br><span class="line"><span class="comment">//                https://www.cnblogs.com/dolphin0520/p/3933551.html</span></span><br><span class="line">                iterator.remove();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Hero&gt; iterator = testHero.iterator();iterator.hasNext();)&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>Method2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">        testHero.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">99</span>; i++) &#123;</span><br><span class="line">            testHero.add(<span class="keyword">new</span> Hero(<span class="string">&quot;hero name &quot;</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(testHero);</span><br><span class="line">        List&lt;Hero&gt; deleteHero = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">//use another List to store the objects needed to be deleted</span></span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;Hero&gt; iterator = testHero.iterator();iterator.hasNext();)&#123;</span><br><span class="line">            Hero temp = iterator.next();</span><br><span class="line"><span class="comment">//            char index = temp.name.charAt(temp.name.length() - 1); //wrong</span></span><br><span class="line">            <span class="keyword">int</span> index = Integer.parseInt(temp.name.substring(<span class="number">10</span>));</span><br><span class="line">            <span class="keyword">if</span>(index%<span class="number">8</span>==<span class="number">0</span>&amp;&amp;index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                deleteHero.add(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        testHero.removeAll(deleteHero);</span><br><span class="line">        System.out.println(testHero);</span><br></pre></td></tr></table></figure><h4 id="Other-sets"><a href="#Other-sets" class="headerlink" title="Other sets"></a>Other sets</h4><p>To be continued…</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Set </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人博客Hexo</title>
      <link href="archives/b085374e.html"/>
      <url>archives/b085374e.html</url>
      
        <content type="html"><![CDATA[<h2 id="如何使用Hexo来搭建个人博客？"><a href="#如何使用Hexo来搭建个人博客？" class="headerlink" title="如何使用Hexo来搭建个人博客？"></a>如何使用Hexo来搭建个人博客？</h2><p>本文的操作环境基于Windows10系统，生成文件部署与GitHub上，使用阿里云的个人域名进行重定向。</p> <a id="more"></a><ol><li><p>安装node，npm，cnpm，hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---#安装Nodejs</span><br><span class="line">node -v#查看node版本</span><br><span class="line">npm -v#查看npm版本</span><br><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org#安装淘宝的cnpm 管理器</span><br><span class="line">cnpm -v#查看cnpm版本</span><br><span class="line">cnpm install -g hexo-cli    #安装hexo框架</span><br><span class="line">hexo -v#查看hexo版本</span><br></pre></td></tr></table></figure></li><li><p>创建文件夹blog，进入该文件夹，初始化hexo，启动本地博客服务，尝试访问本地地址来查看效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir blog<span class="comment">#创建blog目录</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> blog <span class="comment">#进入blog目录</span></span></span><br><span class="line">hexo init #生成博客 初始化博客</span><br><span class="line">hexo s#启动本地博客服务</span><br><span class="line">http://localhost:4000/#本地访问地址</span><br></pre></td></tr></table></figure></li><li><p>新建文章，修改内容。<br>清理旧记录，创建新记录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;我的第一篇文章&quot; #创建新的文章 </span><br><span class="line"><span class="meta">#</span><span class="bash">返回blog目录</span></span><br><span class="line">hexo clean #清理</span><br><span class="line">hexo g #生成</span><br></pre></td></tr></table></figure></li><li><p>在GitHub上创建一个新的仓库<code>YourGithubName.github.io</code>。【注意】需要保持第一个前缀与用户名完全一致，这是GitHubPages的要求。<br>使用cnpm安装git部署插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Github创建一个新的仓库 YourGithubName.github.io</span></span><br><span class="line">cnpm install --save hexo-deployer-git #在blog目录下安装git部署插件</span><br></pre></td></tr></table></figure></li><li><p>在Hexo的配置文件<code>_config.yml</code>中添加GitHub的相关配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Deployment</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span></span><br><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: https://github.com/YourGithubName/YourGithubName.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></li><li><p>将本地仓库部署到GitHub上，访问对应的GitHubPages</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d#部署到Github仓库里</span><br><span class="line">https://YourGithubName.github.io/  #访问这个地址可以查看博客</span><br></pre></td></tr></table></figure></li><li><p>下载合适的Hexo主题，修改Hexo配置文件以调整主题，访问对应的GitHubPages</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia  #下载yilia主题到本地</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">修改hexo根目录下的 _config.yml 文件 ： theme: yilia</span></span><br><span class="line">hexo c#清理一下</span><br><span class="line">hexo g#生成</span><br><span class="line">hexo d#部署到远程Github仓库</span><br><span class="line">https://YourGithubName.github.io/  #查看博客</span><br></pre></td></tr></table></figure></li><li><p>个性化域名：</p><p>GitHubPages可以接受www, blog, @这三种域名前缀。</p><ol><li><p>修改阿里云域名解析设置（推荐使用非顶级域名，即这里的主机记录设置为非@）：</p><table><thead><tr><th>主机记录</th><th>记录类型</th><th>解析线路</th><th>记录值</th></tr></thead><tbody><tr><td>blog</td><td>CNAME</td><td>默认</td><td>YourGithubName.github.io</td></tr></tbody></table></li><li><p>在本地目录中的source目录下，新建不带后缀的CNAME文件，在里面添加自己的域名，如<a href="https://blog.yulin.cool/">blog.yulin.cool</a>，即本站。然后hexo c; hexo g; hexo d; 将本地的变化推送到GitHub仓库上。</p></li><li><p>在GitHub上进行设置：点击repo中的Settings设置，找到Custom domain，填上自己的域名，比如<a href="https://blog.yulin.cool/">blog.yulin.cool</a>。</p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
